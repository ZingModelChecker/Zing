class SingletonLock {
	static bool locked;

	atomic static void acquire () {
		select { wait (!locked) -> locked = true; }
	}

	atomic static void release () {
		locked = false;
	}
};


class BoolProg {
	static bool g8;
	static bool g7;
	static bool g6;
	static bool g5;
	static bool g4;
	static bool g3;
	static bool g2;
	static bool g1;
	static bool g0;
	static bool locked;
	atomic static bool schoose(bool pos,bool neg){
		bool s;
		if (pos)
			return true;
		else if (neg)
			return false;
		else {s = choose (bool); return s; }}

	activate static void main() {
		bool t_l0_6;
		bool t_l0_5;
		bool t_l0_4;
		bool t_l0_3;
		bool t_l0_2;
		bool t_l0_1;
		bool t_l0_0;

		atomic {
		g1 = choose (bool);
		g2 = choose (bool);
		g4 = choose (bool);
		g5 = choose (bool);
		g6 = choose (bool);
		g7 = choose (bool);
		g8 = choose (bool);
		}
		goto L15;
L15:;
	atomic {
		trace ("c2bp_b_15");
		trace ("c2bp_i_15_1");
		trace ("c2bp_stmt_15_1");
	}
	atomic {
		trace ("c2bpcall_15_1");
		trace ("c2bpcallrtb_12");
	}
		__init1_1();;
	atomic {
		trace ("c2bpreturnpt_15_2");
	}
		goto L12;
L14:;
	atomic {
		trace ("c2bp_b_14");
		trace ("c2bp_i_14_1");
		trace ("c2bpnext_b_6"); goto L6;
	}
L12:;
	atomic {
		trace ("c2bp_b_12");
		trace ("c2bp_i_12_1");
		trace ("c2bpnext_b_11"); goto L11;
	}
L11:;
	atomic {
		trace ("c2bp_b_11");
		trace ("c2bp_i_11_1");
		trace ("c2bpnext_i_11_2");
		trace ("c2bp_stmt_11_1");
		trace ("C_155_11_1");
		g0=schoose(true,false);
	}
	atomic {
		trace ("c2bp_i_11_2");
		trace ("c2bpnext_i_11_3");
		trace ("c2bp_stmt_11_2");
		trace ("C_156_11_2");
		g3=schoose(true,false);
	}
	atomic {
		trace ("c2bp_i_11_3");
		trace ("c2bp_stmt_11_3");
		t_l0_0=schoose(g3,!(g3));
	}
	atomic {
		trace ("c2bpcall_11_3");
		trace ("C_158_11_3");
		trace ("c2bpcallrtb_10");
	}
		bool ret_4_0;
		bool ret_4_1;
		BCSP_Miniport_PnpAdd_1(t_l0_0, out ret_4_1, out ret_4_0);;
		atomic {
		t_l0_1 = ret_4_0;
		t_l0_2 = ret_4_1;
		}
	atomic {
		trace ("c2bpreturnpt_11_4");
	}
		goto L10;
L10:;
	atomic {
		trace ("c2bp_b_10");
		trace ("c2bp_i_10_1");
		trace ("C_159_10_1");
		select {
				wait(true) -> { assume (true); trace ("c2bpnext_b_9"); goto L9; }
				wait(true) -> { assume (true); trace ("c2bpnext_b_14"); goto L14; }
			}
	}
L9:;
	atomic {
		trace ("c2bp_b_9");
		trace ("c2bp_i_9_1");
		trace ("c2bp_stmt_9_1");
	}
	atomic {
		trace ("c2bpcall_9_1");
		trace ("C_160_9_1");
		trace ("c2bpcallrtb_6");
	}
		Loop_1();;
	atomic {
		trace ("c2bpreturnpt_9_2");
	}
		goto L6;
L6:;
	atomic {
		trace ("c2bp_b_6");
		trace ("ASYNC_1");
		trace ("c2bp_i_6_1");
		trace ("c2bp_stmt_6_1");
		t_l0_0=schoose(g3,!(g3));
	}
	atomic {
		trace ("c2bpcall_6_1");
		trace ("C_163_6_1");
	}
		async BCSP_Miniport_SomeDispatchFunction_1(t_l0_0);
	atomic {
		trace ("c2bpreturnpt_6_2");
	}
		goto L4;
L4:;
	atomic {
		trace ("c2bp_b_4");
		trace ("ASYNC_2");
		trace ("c2bp_i_4_1");
		trace ("c2bp_stmt_4_1");
		t_l0_0=schoose(g3,!(g3));
	}
	atomic {
		trace ("c2bpcall_4_1");
		trace ("C_165_4_1");
	}
		async BCSP_Miniport_PnpStop_1(t_l0_0);
	atomic {
		trace ("c2bpreturnpt_4_2");
	}
		goto L3;
L3:;
	atomic {
		trace ("c2bp_b_3");
		trace ("c2bp_i_3_1");
		trace ("c2bpnext_i_3_2");
		trace ("c2bp_stmt_3_1");
		trace ("C_167_3_1");
	}
	atomic {
		trace ("c2bp_i_3_2");
		trace ("c2bpreturnstmt");
		return;
	}
	}

	static void KeWaitForSingleObject_1(bool l1_0, out bool f_out2, out bool f_out1) {
		bool l1_1;

		goto L9;
L9:;
	atomic {
		trace ("c2bp_b_9");
		trace ("c2bp_i_9_1");
		trace ("c2bpnext_b_8"); goto L8;
	}
L8:
	atomic {
		trace ("c2bp_b_8");
		trace ("c2bp_i_8_1");
		trace ("c2bpnext_i_8_2");
		trace ("c2bp_stmt_8_1");
		trace ("C_96_8_1");
		l1_1=schoose(l1_0,!(l1_0));
	}
	atomic {
		trace ("c2bp_i_8_2");
		trace ("C_97_8_2");
	}
		atomic { select { wait (!locked) -> { assume (((true)&&(!((l1_1)&&(g2))))&&(!((l1_1)&&(g2)))); locked = true; }}}
L5:;
		assume (((true)&&(!((l1_1)&&(g2))))&&(!((l1_1)&&(g2))));
	atomic {
		trace ("c2bp_b_5");
		trace ("WAIT_BRANCH");
		trace ("c2bp_i_5_1");
		trace ("c2bpnext_i_5_2");
		trace ("c2bp_stmt_5_1");
		trace ("C_100_5_1");
		bool hook_10_l1_1;
		hook_10_l1_1 = l1_1;
		g2=schoose(false,false);
		assume ((!((hook_10_l1_1)&&(!(g2))))&&(!((hook_10_l1_1)&&(!(g2)))));
	}
	atomic {
		trace ("c2bp_i_5_2");
		trace ("c2bpnext_b_3"); goto L3;
	}
L3:;
	atomic {
		trace ("c2bp_b_3");
		trace ("c2bp_i_3_1");
		trace ("c2bpnext_i_3_2");
		trace ("c2bp_stmt_3_1");
		trace ("C_102_3_1");
	}
	atomic {
		trace ("c2bp_i_3_2");
		f_out1 = l1_0;
		f_out2 = l1_1;
		locked = false;
		trace ("c2bpreturnstmt");
		return;
	}
	}

	static void BCSP_Miniport_SomeDispatchFunction_1(bool l2_0) {
		bool t_l2_6;
		bool t_l2_5;
		bool t_l2_4;
		bool t_l2_3;
		bool l2_2;
		bool l2_1;

		goto L12;
L15:;
		assume (g0);
	atomic {
		trace ("c2bp_b_15");
		trace ("c2bp_i_15_1");
		trace ("c2bpnext_b_3"); goto L3;
	}
L14:;
	atomic {
		trace ("c2bp_b_14");
		trace ("c2bp_i_14_1");
		trace ("c2bpnext_b_3"); goto L3;
	}
L12:;
	atomic {
		trace ("c2bp_b_12");
		trace ("c2bp_i_12_1");
		trace ("c2bpnext_b_11"); goto L11;
	}
L11:;
	atomic {
		trace ("c2bp_b_11");
		trace ("c2bp_i_11_1");
		trace ("c2bpnext_i_11_2");
		trace ("c2bp_stmt_11_1");
		trace ("C_438_11_1");
		l2_1=schoose((g1)&&(l2_0),(!(g1))&&(l2_0));
	}
	atomic {
		trace ("c2bp_i_11_2");
		trace ("c2bp_stmt_11_2");
		t_l2_3=schoose(l2_1,!(l2_1));
	}
	atomic {
		trace ("c2bpcall_11_2");
		trace ("C_440_11_2");
		trace ("c2bpcallrtb_10");
	}
		bool ret_13_0;
		bool ret_13_1;
		BCSP_IoIncrement_1(t_l2_3, out ret_13_1, out ret_13_0);;
		atomic {
		t_l2_4 = ret_13_0;
		t_l2_5 = ret_13_1;
		}
	atomic {
		trace ("c2bpreturnpt_11_3");
		l2_2=schoose(t_l2_4,!(t_l2_4));
	}
		goto L10;
L10:;
	atomic {
		trace ("c2bp_b_10");
		trace ("c2bp_i_10_1");
		trace ("C_442_10_1");
		select {
				wait(true) -> { assume (true); trace ("c2bpnext_b_14"); goto L14; }
				wait(true) -> { assume (!((l2_2)||(l2_2))); trace ("c2bpnext_b_8"); goto L8; }
			}
	}
L8:;
		assume (!((l2_2)||(l2_2)));
	atomic {
		trace ("c2bp_b_8");
		trace ("c2bp_i_8_1");
		trace ("C_444_8_1");
		select {
				wait(true) -> { assume (g0); trace ("c2bpnext_b_15"); goto L15; }
				wait(true) -> { assume (!(g0)); trace ("c2bpnext_b_6"); goto L6; }
			}
	}
L6:;
		assume (!(g0));
	atomic {
		trace ("c2bp_b_6");
		trace ("SLIC_ERROR"); assert (false);
		trace ("c2bp_i_6_1");
		trace ("c2bpnext_b_5"); goto L5;
	}
L5:;
	atomic {
		trace ("c2bp_b_5");
		trace ("c2bp_i_5_1");
		trace ("c2bpnext_b_4"); goto L4;
	}
L4:;
	atomic {
		trace ("c2bp_b_4");
		trace ("c2bp_i_4_1");
		trace ("c2bpnext_b_3"); goto L3;
	}
L3:;
	atomic {
		trace ("c2bp_b_3");
		trace ("c2bp_i_3_1");
		trace ("c2bp_stmt_3_1");
		t_l2_3=schoose(l2_1,!(l2_1));
	}
	atomic {
		trace ("c2bpcall_3_1");
		trace ("C_449_3_1");
		trace ("c2bpcallrtb_1");
	}
		bool ret_16_0;
		BCSP_IoDecrement_1(t_l2_3, out ret_16_0);;
		atomic {
		t_l2_6 = ret_16_0;
		}
	atomic {
		trace ("c2bpreturnpt_3_2");
	}
		goto L1;
L1:;
	atomic {
		trace ("c2bp_b_1");
		trace ("c2bp_i_1_1");
		trace ("c2bpreturnstmt");
		return;
	}
	}

	static void BCSP_IoIncrement_1(bool l3_0, out bool f_out2, out bool f_out1) {
		bool t_l3_5;
		bool t_l3_4;
		bool t_l3_3;
		bool t_l3_2;
		bool l3_1;

		goto L14;
L14:;
	atomic {
		trace ("c2bp_b_14");
		trace ("c2bp_i_14_1");
		trace ("c2bpnext_b_13"); goto L13;
	}
L13:;
	atomic {
		trace ("c2bp_b_13");
		trace ("c2bp_i_13_1");
		trace ("c2bp_stmt_13_1");
		t_l3_2=schoose(l3_0,false);
	}
	atomic {
		trace ("c2bpcall_13_1");
		trace ("C_256_13_1");
		trace ("c2bpcallrtb_12");
	}
		bool ret_18_0;
		InterlockedIncrement_1(t_l3_2, out ret_18_0);;
		atomic {
		t_l3_3 = ret_18_0;
		}
	atomic {
		trace ("c2bpreturnpt_13_2");
	}
		goto L12;
L12:;
	atomic {
		trace ("c2bp_b_12");
		trace ("c2bp_i_12_1");
		trace ("C_258_12_1");
		select {
				wait(true) -> { assume (!((!(g7))&&(l3_0))); trace ("c2bpnext_b_10"); goto L10; }
				wait(true) -> { assume (!((g7)&&(l3_0))); trace ("c2bpnext_b_6"); goto L6; }
			}
	}
L10:;
		assume (!((!(g7))&&(l3_0)));
	atomic {
		trace ("c2bp_b_10");
		trace ("c2bp_i_10_1");
		trace ("c2bpnext_i_10_2");
		trace ("c2bp_stmt_10_1");
		trace ("C_265_10_1");
		l3_1=schoose(false,true);
	}
	atomic {
		trace ("c2bp_i_10_2");
		f_out1 = l3_1;
		f_out2 = l3_0;
		trace ("c2bpreturnstmt");
		return;
	}
L6:;
		assume (!((g7)&&(l3_0)));
	atomic {
		trace ("c2bp_b_6");
		trace ("c2bp_i_6_1");
		trace ("c2bp_stmt_6_1");
		t_l3_4=schoose(l3_0,!(l3_0));
	}
	atomic {
		trace ("c2bpcall_6_1");
		trace ("C_260_6_1");
		trace ("c2bpcallrtb_5");
	}
		bool ret_21_0;
		BCSP_IoDecrement_1(t_l3_4, out ret_21_0);;
		atomic {
		t_l3_5 = ret_21_0;
		}
	atomic {
		trace ("c2bpreturnpt_6_2");
	}
		goto L5;
L5:;
	atomic {
		trace ("c2bp_b_5");
		trace ("c2bp_i_5_1");
		trace ("c2bpnext_i_5_2");
		trace ("c2bp_stmt_5_1");
		trace ("C_261_5_1");
		l3_1=schoose(true,false);
	}
	atomic {
		trace ("c2bp_i_5_2");
		f_out1 = l3_1;
		f_out2 = l3_0;
		trace ("c2bpreturnstmt");
		return;
	}
	}

	static void BCSP_IoDecrement_1(bool l4_0, out bool f_out1) {
		bool t_l4_4;
		bool t_l4_3;
		bool t_l4_2;
		bool l4_1;

		goto L9;
L11:;
	atomic {
		trace ("c2bp_b_11");
		trace ("c2bp_i_11_1");
		trace ("c2bpnext_b_1"); goto L1;
	}
L9:;
	atomic {
		trace ("c2bp_b_9");
		trace ("c2bp_i_9_1");
		trace ("c2bpnext_b_8"); goto L8;
	}
L8:;
	atomic {
		trace ("c2bp_b_8");
		trace ("c2bp_i_8_1");
		trace ("c2bp_stmt_8_1");
		t_l4_2=schoose(l4_0,false);
	}
	atomic {
		trace ("c2bpcall_8_1");
		trace ("C_295_8_1");
		trace ("c2bpcallrtb_7");
	}
		bool ret_24_0;
		bool ret_24_1;
		InterlockedDecrement_1(t_l4_2, out ret_24_1, out ret_24_0);;
		atomic {
		t_l4_3 = ret_24_0;
		t_l4_4 = ret_24_1;
		}
	atomic {
		trace ("c2bpreturnpt_8_2");
		l4_1=schoose(t_l4_3,!(t_l4_3));
	}
		goto L7;
L7:;
	atomic {
		trace ("c2bp_b_7");
		trace ("c2bp_i_7_1");
		trace ("C_297_7_1");
		select {
				wait(true) -> { assume (true); trace ("c2bpnext_b_11"); goto L11; }
				wait(true) -> { assume (!((l4_1)||(l4_1))); trace ("c2bpnext_b_5"); goto L5; }
			}
	}
L5:;
		assume (!((l4_1)||(l4_1)));
	atomic {
		trace ("c2bp_b_5");
		trace ("c2bp_i_5_1");
		trace ("c2bp_stmt_5_1");
	}
	atomic {
		trace ("c2bpcall_5_1");
		trace ("C_302_5_1");
		trace ("c2bpcallrtb_1");
	}
		KeSetEvent_1();;
	atomic {
		trace ("c2bpreturnpt_5_2");
	}
		goto L1;
L1:;
	atomic {
		trace ("c2bp_b_1");
		trace ("c2bp_i_1_1");
		f_out1 = l4_0;
		trace ("c2bpreturnstmt");
		return;
	}
	}

	static void InterlockedIncrement_1(bool l5_0, out bool f_out1) {
		SingletonLock.acquire ();

		assume ((true)&&(!((g5)&&(g4)))); 
		goto L4;
L4:;
	atomic {
		trace ("c2bp_b_4");
		trace ("c2bp_i_4_1");
		trace ("c2bpnext_b_3"); goto L3;
	}
L3:;
	atomic {
		trace ("c2bp_b_3");
		trace ("c2bp_i_3_1");
		trace ("c2bpnext_i_3_2");
		trace ("c2bp_stmt_3_1");
		trace ("C_197_3_1");
		bool hook_26_l5_0;
		bool hook_26_g4;
		bool hook_26_g5;
		hook_26_l5_0 = l5_0;
		hook_26_g4 = g4;
		hook_26_g5 = g5;
		bool _26_tmp0;
		bool _26_tmp1;
		bool _26_tmp2;
		_26_tmp0 = schoose ((g4)&&(!(l5_0)),(!(l5_0))&&((!(g4))||(l5_0)));
		_26_tmp1 = schoose ((g5)&&(!(l5_0)),(!(l5_0))&&((!(g5))||(l5_0)));
		_26_tmp2 = schoose ((g6)&&(!(l5_0)),(!(l5_0))&&((!(g6))||(l5_0)));
		g4 = _26_tmp0;
		g5 = _26_tmp1;
		g6 = _26_tmp2;
		assume ((true)&&(!((g5)&&(g4)))); 
		assume ((((((((!(((!(hook_26_g4))&&(hook_26_l5_0))&&(g5)))&&(!(((hook_26_g5)&&(!(g6)))&&(!(g5)))))&&(!(((hook_26_g4)&&(!(g4)))&&(!(g5)))))&&(!(((!(hook_26_g4))&&(hook_26_l5_0))&&(g5))))&&(!(((hook_26_g5)&&(!(g6)))&&(!(g5)))))&&(!(((hook_26_g4)&&(!(g4)))&&(!(g5)))))&&(!(((hook_26_g4)&&(hook_26_l5_0))&&(!(g5)))))&&(!((g5)&&(g4))));
	}
	atomic {
		trace ("c2bp_i_3_2");
		trace ("c2bpnext_i_3_3");
		trace ("c2bp_stmt_3_2");
		trace ("C_198_3_2");
	}
	atomic {
		trace ("c2bp_i_3_3");
		f_out1 = l5_0;
		SingletonLock.release ();
		trace ("c2bpreturnstmt");
		return;
	}
	}

	static void BCSP_Miniport_PnpStop_1(bool l6_0) {
		bool t_l6_9;
		bool t_l6_8;
		bool t_l6_7;
		bool t_l6_6;
		bool t_l6_5;
		bool t_l6_4;
		bool t_l6_3;
		bool t_l6_2;
		bool l6_1;

		goto L6;
L6:;
	atomic {
		trace ("c2bp_b_6");
		trace ("c2bp_i_6_1");
		trace ("c2bpnext_b_5"); goto L5;
	}
L5:;
	atomic {
		trace ("c2bp_b_5");
		trace ("c2bp_i_5_1");
		trace ("c2bpnext_i_5_2");
		trace ("c2bp_stmt_5_1");
		trace ("C_387_5_1");
		l6_1=schoose((g1)&&(l6_0),(!(g1))&&(l6_0));
	}
	atomic {
		trace ("c2bp_i_5_2");
		trace ("c2bp_stmt_5_2");
		bool _28_tmp0;
		bool _28_tmp1;
		_28_tmp0 = schoose (l6_1,false);
		_28_tmp1 = schoose (true,false);
		t_l6_2 = _28_tmp0;
		t_l6_3 = _28_tmp1;
	}
	atomic {
		trace ("c2bpcall_5_2");
		trace ("C_393_5_2");
		trace ("c2bpcallrtb_4");
	}
		bool ret_29_0;
		InterlockedExchange_1(t_l6_2, t_l6_3, out ret_29_0);;
		atomic {
		t_l6_4 = ret_29_0;
		}
	atomic {
		trace ("c2bpreturnpt_5_3");
	}
		goto L4;
L4:;
	atomic {
		trace ("c2bp_b_4");
		trace ("c2bp_i_4_1");
		trace ("c2bp_stmt_4_1");
		t_l6_5=schoose(l6_1,!(l6_1));
	}
	atomic {
		trace ("c2bpcall_4_1");
		trace ("C_398_4_1");
		trace ("c2bpcallrtb_3");
	}
		bool ret_31_0;
		BCSP_IoDecrement_1(t_l6_5, out ret_31_0);;
		atomic {
		t_l6_6 = ret_31_0;
		}
	atomic {
		trace ("c2bpreturnpt_4_2");
	}
		goto L3;
L3:;
	atomic {
		trace ("c2bp_b_3");
		trace ("c2bp_i_3_1");
		trace ("c2bp_stmt_3_1");
		t_l6_7=schoose(l6_1,false);
	}
	atomic {
		trace ("c2bpcall_3_1");
		trace ("C_403_3_1");
		trace ("c2bpcallrtb_2");
	}
		bool ret_33_0;
		bool ret_33_1;
		KeWaitForSingleObject_1(t_l6_7, out ret_33_1, out ret_33_0);;
		atomic {
		t_l6_8 = ret_33_0;
		t_l6_9 = ret_33_1;
		}
	atomic {
		trace ("c2bpreturnpt_3_2");
	}
		goto L2;
L2:;
	atomic {
		trace ("c2bp_b_2");
		trace ("c2bp_i_2_1");
		trace ("c2bpnext_i_2_2");
		trace ("c2bp_stmt_2_1");
		trace ("C_410_2_1");
		g0=schoose(false,true);
	}
	atomic {
		trace ("c2bp_i_2_2");
		trace ("c2bpnext_b_1"); goto L1;
	}
L1:;
	atomic {
		trace ("c2bp_b_1");
		trace ("c2bp_i_1_1");
		trace ("c2bpreturnstmt");
		return;
	}
	}

	static void InterlockedExchange_1(bool l7_1, bool l7_0, out bool f_out1) {
		SingletonLock.acquire ();

		goto L4;
L4:;
	atomic {
		trace ("c2bp_b_4");
		trace ("c2bp_i_4_1");
		trace ("c2bpnext_b_3"); goto L3;
	}
L3:;
	atomic {
		trace ("c2bp_b_3");
		trace ("c2bp_i_3_1");
		trace ("c2bpnext_i_3_2");
		trace ("c2bp_stmt_3_1");
		trace ("C_189_3_1");
	}
	atomic {
		trace ("c2bp_i_3_2");
		trace ("c2bpnext_i_3_3");
		trace ("c2bp_stmt_3_2");
		trace ("C_190_3_2");
		bool _35_tmp0;
		bool _35_tmp1;
		_35_tmp0 = schoose ((g7)&&(!(l7_1)),(((l7_0)||((((!(g4))&&(((g5)&&(l7_0))||((l7_0)&&(g5))))||(((g4)&&((((!(g5))&&(l7_0))||((g5)&&(!(l7_0))))||(((!(l7_0))&&(g5))||((l7_0)&&(!(g5))))))||(((!(g7))&&(((g8)&&(l7_0))||((l7_0)&&(g8))))||((g7)&&((((!(g8))&&(l7_0))||((g8)&&(!(l7_0))))||(((!(l7_0))&&(g8))||((l7_0)&&(!(g8)))))))))||(l7_0)))||(!(l7_1)))&&((!(g7))||(l7_1)));
		_35_tmp1 = schoose (((l7_0)&&(l7_1))||((g8)&&(!(l7_1))),((!(l7_0))||(!(l7_1)))&&((!(g8))||(l7_1)));
		g7 = _35_tmp0;
		g8 = _35_tmp1;
	}
	atomic {
		trace ("c2bp_i_3_3");
		trace ("c2bpnext_i_3_4");
		trace ("c2bp_stmt_3_3");
		trace ("C_191_3_3");
	}
	atomic {
		trace ("c2bp_i_3_4");
		f_out1 = l7_1;
		SingletonLock.release ();
		trace ("c2bpreturnstmt");
		return;
	}
	}

	static void KeInitializeEvent_1(bool l8_1, bool l8_0, out bool f_out1) {

		goto L11;
L11:;
	atomic {
		trace ("c2bp_b_11");
		trace ("c2bp_i_11_1");
		trace ("c2bpnext_b_10"); goto L10;
	}
L10:;
	atomic {
		trace ("c2bp_b_10");
		trace ("c2bp_i_10_1");
		trace ("C_110_10_1");
		select {
				wait(true) -> { assume (true); trace ("c2bpnext_b_8"); goto L8; }
				wait(true) -> { assume (!((l8_0)||(l8_0))); trace ("c2bpnext_b_4"); goto L4; }
			}
	}
L8:;
	atomic {
		trace ("c2bp_b_8");
		trace ("c2bp_i_8_1");
		trace ("c2bpnext_i_8_2");
		trace ("c2bp_stmt_8_1");
		trace ("C_117_8_1");
		bool hook_36_l8_1;
		hook_36_l8_1 = l8_1;
		g2=schoose(false,false);
		assume (!((hook_36_l8_1)&&(!(g2))));
	}
	atomic {
		trace ("c2bp_i_8_2");
		trace ("c2bpnext_b_1"); goto L1;
	}
L4:;
		assume (!((l8_0)||(l8_0)));
	atomic {
		trace ("c2bp_b_4");
		trace ("POS_BRANCH");
		trace ("c2bp_i_4_1");
		trace ("c2bpnext_i_4_2");
		trace ("c2bp_stmt_4_1");
		trace ("C_113_4_1");
		g2=schoose(false,!(g2));
	}
	atomic {
		trace ("c2bp_i_4_2");
		trace ("c2bpnext_b_1"); goto L1;
	}
L1:;
	atomic {
		trace ("c2bp_b_1");
		trace ("c2bp_i_1_1");
		f_out1 = l8_1;
		trace ("c2bpreturnstmt");
		return;
	}
	}

	static void __init1_1() {

		goto L3;
L3:;
	atomic {
		trace ("c2bp_b_3");
		trace ("c2bp_i_3_1");
		trace ("c2bpnext_b_2"); goto L2;
	}
L2:;
	atomic {
		trace ("c2bp_b_2");
		trace ("c2bp_i_2_1");
		trace ("c2bpnext_b_1"); goto L1;
	}
L1:;
	atomic {
		trace ("c2bp_b_1");
		trace ("c2bp_i_1_1");
		trace ("c2bpreturnstmt");
		return;
	}
	}

	static void BCSP_Miniport_PnpAdd_1(bool l10_0, out bool f_out2, out bool f_out1) {
		bool t_l10_7;
		bool t_l10_6;
		bool t_l10_5;
		bool t_l10_4;
		bool t_l10_3;
		bool t_l10_2;
		bool l10_1;

		atomic {
		l10_1 = choose (bool);
		}
		goto L11;
L11:;
	atomic {
		trace ("c2bp_b_11");
		trace ("c2bp_i_11_1");
		trace ("c2bpnext_b_10"); goto L10;
	}
L10:;
	atomic {
		trace ("c2bp_b_10");
		trace ("c2bp_i_10_1");
		trace ("c2bpnext_i_10_2");
		trace ("c2bp_stmt_10_1");
		trace ("C_328_10_1");
	}
	atomic {
		trace ("c2bp_i_10_2");
		trace ("c2bpnext_i_10_3");
		trace ("c2bp_stmt_10_2");
		trace ("C_334_10_2");
		g1=schoose(l10_0,false);
	}
	atomic {
		trace ("c2bp_i_10_3");
		trace ("C_336_10_3");
		select {
				wait(true) -> { assume (true); trace ("c2bpnext_b_5"); goto L5; }
				wait(true) -> { assume ((true)&&(!((l10_0)&&(g1)))); trace ("c2bpnext_b_8"); goto L8; }
			}
	}
L8:;
		assume ((true)&&(!((l10_0)&&(g1))));
	atomic {
		trace ("c2bp_b_8");
		trace ("c2bp_i_8_1");
		trace ("c2bpnext_i_8_2");
		trace ("c2bp_stmt_8_1");
		trace ("C_338_8_1");
	}
	atomic {
		trace ("c2bp_i_8_2");
		f_out1 = l10_0;
		f_out2 = l10_1;
		trace ("c2bpreturnstmt");
		return;
	}
L5:;
	atomic {
		trace ("c2bp_b_5");
		trace ("c2bp_i_5_1");
		trace ("c2bpnext_i_5_2");
		trace ("c2bp_stmt_5_1");
		trace ("C_341_5_1");
		l10_1=schoose((g1)&&(l10_0),(!(g1))&&(l10_0));
	}
	atomic {
		trace ("c2bp_i_5_2");
		trace ("c2bpnext_i_5_3");
		trace ("c2bp_stmt_5_2");
		trace ("C_343_5_2");
		bool _40_tmp0;
		bool _40_tmp1;
		bool _40_tmp2;
		_40_tmp0 = schoose (l10_1,false);
		_40_tmp1 = schoose (false,(!(g5))||(l10_1));
		_40_tmp2 = schoose (false,(!(g6))||(l10_1));
		g4 = _40_tmp0;
		g5 = _40_tmp1;
		g6 = _40_tmp2;
	}
	atomic {
		trace ("c2bp_i_5_3");
		trace ("c2bpnext_i_5_4");
		trace ("c2bp_stmt_5_3");
		trace ("C_344_5_3");
	}
	atomic {
		trace ("c2bp_i_5_4");
		trace ("c2bpnext_i_5_5");
		trace ("c2bp_stmt_5_4");
		trace ("C_350_5_4");
		bool _41_tmp0;
		bool _41_tmp1;
		_41_tmp0 = schoose (l10_1,false);
		_41_tmp1 = schoose (false,(!(g8))||(l10_1));
		g7 = _41_tmp0;
		g8 = _41_tmp1;
	}
	atomic {
		trace ("c2bp_i_5_5");
		trace ("c2bp_stmt_5_5");
		t_l10_2=schoose(l10_1,!(l10_1));
	}
	atomic {
		trace ("c2bpcall_5_5");
		trace ("C_352_5_5");
		trace ("c2bpcallrtb_4");
	}
		bool ret_43_0;
		bool ret_43_1;
		BCSP_IoIncrement_1(t_l10_2, out ret_43_1, out ret_43_0);;
		atomic {
		t_l10_3 = ret_43_0;
		t_l10_4 = ret_43_1;
		}
	atomic {
		trace ("c2bpreturnpt_5_6");
	}
		goto L4;
L4:;
	atomic {
		trace ("c2bp_b_4");
		trace ("c2bp_i_4_1");
		trace ("c2bp_stmt_4_1");
		bool _44_tmp0;
		bool _44_tmp1;
		_44_tmp0 = schoose (l10_1,false);
		_44_tmp1 = schoose (true,false);
		t_l10_5 = _44_tmp0;
		t_l10_6 = _44_tmp1;
	}
	atomic {
		trace ("c2bpcall_4_1");
		trace ("C_358_4_1");
		trace ("c2bpcallrtb_3");
	}
		bool ret_45_0;
		KeInitializeEvent_1(t_l10_5, t_l10_6, out ret_45_0);;
		atomic {
		t_l10_7 = ret_45_0;
		}
	atomic {
		trace ("c2bpreturnpt_4_2");
	}
		goto L3;
L3:;
	atomic {
		trace ("c2bp_b_3");
		trace ("c2bp_i_3_1");
		trace ("c2bpnext_i_3_2");
		trace ("c2bp_stmt_3_1");
		trace ("C_362_3_1");
	}
	atomic {
		trace ("c2bp_i_3_2");
		trace ("c2bpnext_i_3_3");
		trace ("c2bp_stmt_3_2");
		trace ("C_363_3_2");
	}
	atomic {
		trace ("c2bp_i_3_3");
		f_out1 = l10_0;
		f_out2 = l10_1;
		trace ("c2bpreturnstmt");
		return;
	}
	}

	static void Loop_1() {

		goto L7;
L9:;
	atomic {
		trace ("c2bp_b_9");
		trace ("c2bp_i_9_1");
		trace ("c2bpnext_b_5"); goto L5;
	}
L7:;
	atomic {
		trace ("c2bp_b_7");
		trace ("c2bp_i_7_1");
		trace ("c2bpnext_b_6"); goto L6;
	}
L6:;
	atomic {
		trace ("c2bp_b_6");
		trace ("c2bp_i_6_1");
		trace ("c2bpnext_b_3"); goto L3;
	}
L5:;
	atomic {
		trace ("c2bp_b_5");
		trace ("c2bp_i_5_1");
		trace ("C_144_5_1");
		select {
				wait(true) -> { assume (false); trace ("c2bpnext_b_1"); goto L1; }
				wait(true) -> { assume (true); trace ("c2bpnext_b_9"); goto L9; }
			}
	}
L3:;
	atomic {
		trace ("c2bp_b_3");
		trace ("c2bp_i_3_1");
		trace ("c2bpnext_b_5"); goto L5;
	}
L1:;
		assume (false);
	atomic {
		trace ("c2bp_b_1");
		trace ("c2bp_i_1_1");
		trace ("c2bpreturnstmt");
		return;
	}
	}

	static void InterlockedDecrement_1(bool l12_0, out bool f_out2, out bool f_out1) {
		SingletonLock.acquire ();
		bool l12_1;

		goto L4;
L4:;
	atomic {
		trace ("c2bp_b_4");
		trace ("c2bp_i_4_1");
		trace ("c2bpnext_b_3"); goto L3;
	}
L3:;
	atomic {
		trace ("c2bp_b_3");
		trace ("c2bp_i_3_1");
		trace ("c2bpnext_i_3_2");
		trace ("c2bp_stmt_3_1");
		trace ("C_204_3_1");
		bool hook_46_l12_0;
		bool hook_46_g5;
		bool hook_46_g6;
		hook_46_l12_0 = l12_0;
		hook_46_g5 = g5;
		hook_46_g6 = g6;
		bool _46_tmp0;
		bool _46_tmp1;
		bool _46_tmp2;
		_46_tmp0 = schoose ((g4)&&(!(l12_0)),(!(l12_0))&&((!(g4))||(l12_0)));
		_46_tmp1 = schoose ((g5)&&(!(l12_0)),(!(l12_0))&&((!(g5))||(l12_0)));
		_46_tmp2 = schoose ((g6)&&(!(l12_0)),(!(l12_0))&&((!(g6))||(l12_0)));
		g4 = _46_tmp0;
		g5 = _46_tmp1;
		g6 = _46_tmp2;
		assume ((((((!(((hook_46_g5)&&(!(g4)))&&(!(g5))))&&(!(((hook_46_g6)&&(hook_46_l12_0))&&(g6))))&&(!(((hook_46_g6)&&(!(g6)))&&(!(g5)))))&&(!(((hook_46_g5)&&(!(g4)))&&(!(g5)))))&&(!(((hook_46_g6)&&(hook_46_l12_0))&&(g6))))&&(!(((hook_46_g6)&&(!(g6)))&&(!(g5)))));
	}
	atomic {
		trace ("c2bp_i_3_2");
		trace ("c2bpnext_i_3_3");
		trace ("c2bp_stmt_3_2");
		trace ("C_205_3_2");
		l12_1=schoose((g5)&&(l12_0),(!(g5))&&(l12_0));
	}
	atomic {
		trace ("c2bp_i_3_3");
		f_out1 = l12_1;
		f_out2 = l12_0;
		SingletonLock.release ();
		trace ("c2bpreturnstmt");
		return;
	}
	}

	static void KeSetEvent_1() {

		goto L4;
L4:;
	atomic {
		trace ("c2bp_b_4");
		trace ("c2bp_i_4_1");
		trace ("c2bpnext_b_3"); goto L3;
	}
L3:;
	atomic {
		trace ("c2bp_b_3");
		trace ("c2bp_i_3_1");
		trace ("c2bpnext_b_2"); goto L2;
	}
L2:;
	atomic {
		trace ("c2bp_b_2");
		trace ("SPEC_ASGN");
		trace ("c2bp_i_2_1");
		trace ("c2bpnext_i_2_2");
		trace ("c2bp_stmt_2_1");
		trace ("C_127_2_1");
		g2=schoose(false,!(g2));
	}
	atomic {
		trace ("c2bp_i_2_2");
		trace ("c2bpnext_b_1"); goto L1;
	}
L1:;
	atomic {
		trace ("c2bp_b_1");
		trace ("c2bp_i_1_1");
		trace ("c2bpreturnstmt");
		return;
	}
	}

};
