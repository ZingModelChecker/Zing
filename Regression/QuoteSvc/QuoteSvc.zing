/*
 * mIL model for BPEL abstract processes
 *
 * Compiled on: 3/24/2003 10:54:59 AM
 * 
 * Source BPEL processes:
 *    QuoteService
 *    QuoteClient
 */


/*=================================================================
 = BPEL Process: QuoteService
 ================================================================*/

/******************************************************************
 * Port type: QuoteServiceSoap
 *****************************************************************/

/*
 * Message structure and channel types
 */

struct GetQuoteSoapIn {
    bool _placeholder_;
};
struct GetQuoteSoapOut {
    bool _placeholder_;
};


/*
 * Per-port definitions
 */

// Channel message types
enum eQuoteServiceSoap {
    GetQuoteSoapIn,
    GetQuoteSoapOut,
};

// Definitions for the port's message struct and channel
struct mtRqstQuoteServiceSoap {
    eQuoteServiceSoap mtype;
    ctRespQuoteServiceSoap respChan;
    GetQuoteSoapIn _GetQuoteSoapIn;
};
struct mtRespQuoteServiceSoap {
    eQuoteServiceSoap mtype;
    GetQuoteSoapOut _GetQuoteSoapOut;
};

chan ctRqstQuoteServiceSoap mtRqstQuoteServiceSoap;
chan ctRespQuoteServiceSoap mtRespQuoteServiceSoap;



class QuoteService {
    // track state of dynamically activated process
    static bool active = false;

    /*
     * Container declarations
     */
    static GetQuoteSoapIn quoteRequest;
    static GetQuoteSoapOut quoteResponse;

    /******************************************************************
     * Incoming channel declaration for:
     * BPEL Process: QuoteService
     * Partner: broker
     * Port Type: QuoteServiceSoap
     *****************************************************************/

    static ctRqstQuoteServiceSoap impl_broker_QuoteServiceSoap_rqst =
        new ctRqstQuoteServiceSoap;
    static ctRespQuoteServiceSoap impl_broker_QuoteServiceSoap_resp;

    /*
     * Main mIL process for BPEL process: QuoteService
     */
    static void Run()
    {
        // Temporary variables
        mtRqstQuoteServiceSoap rqst0;
        mtRespQuoteServiceSoap resp1;

        /* receive */
        atomic {
            select { receive(impl_broker_QuoteServiceSoap_rqst,rqst0) -> ; }
            assert(rqst0.mtype == eQuoteServiceSoap.GetQuoteSoapIn, "unexpected msg type");
            assert(impl_broker_QuoteServiceSoap_resp == null, "conflictingRequest");
            impl_broker_QuoteServiceSoap_resp = rqst0.respChan;
            quoteRequest = rqst0._GetQuoteSoapIn;


            /* reply */
            assert(impl_broker_QuoteServiceSoap_resp != null, "reply with no pending request operation");
        }


        atomic {
            resp1.mtype = eQuoteServiceSoap.GetQuoteSoapOut;
            resp1._GetQuoteSoapOut = quoteResponse;
            send(impl_broker_QuoteServiceSoap_resp, resp1);
            impl_broker_QuoteServiceSoap_resp = null;
        }

    }

};

/*=================================================================
 = BPEL Process: QuoteClient
 ================================================================*/



class QuoteClient {
    /*
     * Container declarations
     */
    static GetQuoteSoapIn quoteRequest;
    static GetQuoteSoapOut quoteResponse;

    /******************************************************************
     * Outgoing channel declaration for:
     * Partner: quoteService
     * Port Type: QuoteServiceSoap
     *****************************************************************/

    static ctRqstQuoteServiceSoap uses_quoteService_QuoteServiceSoap_rqst;
    static ctRespQuoteServiceSoap uses_quoteService_QuoteServiceSoap_resp =
        new ctRespQuoteServiceSoap;

    /*
     * Main mIL process for BPEL process: QuoteClient
     */
    static void Run()
    {
        // Temporary variables
        mtRqstQuoteServiceSoap rqst2;
        mtRespQuoteServiceSoap resp3;

        /* invoke */
        atomic {
            if (!QuoteService.active)
            {
                QuoteService.active = true;
                async QuoteService.Run();
            }

            assert(uses_quoteService_QuoteServiceSoap_rqst != null, "uninitializedPartner");
            rqst2.mtype = eQuoteServiceSoap.GetQuoteSoapIn;
            rqst2._GetQuoteSoapIn = quoteRequest;
            rqst2.respChan = uses_quoteService_QuoteServiceSoap_resp;
            send(uses_quoteService_QuoteServiceSoap_rqst, rqst2);
        }

        atomic {
            select { receive(uses_quoteService_QuoteServiceSoap_resp, resp3) -> ; }
            assert(resp3.mtype == eQuoteServiceSoap.GetQuoteSoapOut, "unexpected msg type");
            quoteResponse = resp3._GetQuoteSoapOut;
        }

    }

};

class Init
{
    /*
     * Global initialization process
     */
    activate static void init()
    {
        atomic {
            /*
             * Bind individual ports together
             */

            /* Bind QuoteService/broker to QuoteClient/quoteService */
            QuoteClient.uses_quoteService_QuoteServiceSoap_rqst =
                QuoteService.impl_broker_QuoteServiceSoap_rqst;


            /*
             * Initialize startup processes as specified by the modeling annotations
             */

            async QuoteClient.Run();
        }
    }
};
