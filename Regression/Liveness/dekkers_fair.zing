enum MonitorStates
{
	S1,
	S2
};

enum Events
{    
       P1ToCS,
       P1NotToCS,
       P1Trans,
       P2Trans
};

class Dekkers
{
	static int t = 1;
	static bool y1 = false;
	static bool y2 = false;
	
	static void Process1()
	{
		while(true)
		{			
			y1 = true;
			atomic
			{
				Fairness1.TakeTransition(Events.P1Trans);
				Fairness2.TakeTransition(Events.P1Trans);
				Monitor1.TakeTransition(Events.P1NotToCS);
			}

			while(y2 == true)
			{
				atomic 
				{
					Fairness1.TakeTransition(Events.P1Trans);
					Fairness2.TakeTransition(Events.P1Trans);
					Monitor1.TakeTransition(Events.P1NotToCS);
				}
				if (t != 1)
				{
					atomic 
					{
						Fairness1.TakeTransition(Events.P1Trans);
						Fairness2.TakeTransition(Events.P1Trans);
						Monitor1.TakeTransition(Events.P1NotToCS);
					}
					y1 = false;
					atomic
					{
						Fairness1.TakeTransition(Events.P1Trans);
						Fairness2.TakeTransition(Events.P1Trans);
						Monitor1.TakeTransition(Events.P1NotToCS);
					}
					while (t != 1)
					{
						atomic 
						{
							Fairness1.TakeTransition(Events.P1Trans);
							Fairness2.TakeTransition(Events.P1Trans);
							Monitor1.TakeTransition(Events.P1NotToCS);
						}
					}
					y1 = true;
					atomic
					{
						Fairness1.TakeTransition(Events.P1Trans);
						Fairness2.TakeTransition(Events.P1Trans);
						Monitor1.TakeTransition(Events.P1NotToCS);
					}
				}
			}
			
			//Critical Section
			atomic
			{
				Fairness1.TakeTransition(Events.P1Trans);
				Fairness2.TakeTransition(Events.P1Trans);
				Monitor1.TakeTransition(Events.P1ToCS);
			}
			
			t = 2;
			y1 = false;
			atomic
			{
				Fairness1.TakeTransition(Events.P1Trans);
				Fairness2.TakeTransition(Events.P1Trans);
				Monitor1.TakeTransition(Events.P1NotToCS);
			}
		}
	}
	static void Process2()
	{
		while(true)
		{
			y2 = true;
			atomic
			{
				Fairness1.TakeTransition(Events.P2Trans);
				Fairness2.TakeTransition(Events.P2Trans);
			}
			while (y1 == true)
			{
				atomic
				{
					Fairness1.TakeTransition(Events.P2Trans);
					Fairness2.TakeTransition(Events.P2Trans);
				}
				if (t != 2)
				{
					atomic
					{
						Fairness1.TakeTransition(Events.P2Trans);
						Fairness2.TakeTransition(Events.P2Trans);
					}
					y2 = false;
					atomic
					{
						Fairness1.TakeTransition(Events.P2Trans);
						Fairness2.TakeTransition(Events.P2Trans);
					}

					while(t != 2) {
						atomic
						{
							Fairness1.TakeTransition(Events.P2Trans);
							Fairness2.TakeTransition(Events.P2Trans);
						}
					}
					y2 = true;
					atomic
					{
						Fairness1.TakeTransition(Events.P2Trans);
						Fairness2.TakeTransition(Events.P2Trans);
					}
				}
			}
			
			//Critical Section
			atomic
			{
				Fairness1.TakeTransition(Events.P2Trans);
				Fairness2.TakeTransition(Events.P2Trans);
			}
						
			t = 1;
			y2 = false;
			atomic
			{
				Fairness1.TakeTransition(Events.P2Trans);
				Fairness2.TakeTransition(Events.P2Trans);
			}
		}
	}
	
};

class Monitor1
{
	// monitors P1ToCS and P1NotToCS
	static int fairnessCounter = 1;
	static MonitorStates currState = MonitorStates.S1;
	static void TakeTransition(Events e)
	{
		if (currState == MonitorStates.S1)
		{
			select
			{
				wait(true)-> currState = MonitorStates.S1;
				wait(true)-> currState = MonitorStates.S2;
			}			
		}
		else 
		{
			// currState == MonitorStates.S2
			if (e == Events.P1ToCS)
			{
				assume(false); 
			}
			else
			{
				if (fairnessCounter == 0) {
				   accept(true); // Accepting state
				   fairnessCounter = 1;
				}
			}
		}
		
	}
};

class Fairness1
{
	// monitors P1Trans and P2Trans
	static void TakeTransition(Events e) 
	{
		if (e == Events.P1Trans) 
		{
			if (Monitor1.fairnessCounter == 1)
			   Monitor1.fairnessCounter = 2;
		}
	}
};

class Fairness2
{
	// monitors P1Trans and P2Trans
	static void TakeTransition(Events e) 
	{
		if (e == Events.P2Trans) 
		{
			if (Monitor1.fairnessCounter == 2)
			   Monitor1.fairnessCounter = 0;
		}
	}
};

class MainClass
{
    activate static void Main()
    {
        	async Dekkers.Process1();
			async Dekkers.Process2();		
    }
};
