/*
 * Zing model for BPEL abstract processes
 *
 * Compiled on: 3/24/2003 5:01:04 PM
 * 
 * Source BPEL processes:
 *    auctionService
 *    buyerService
 *    sellerService
 *    registrationService
 */


/*=================================================================
 = BPEL Process: auctionService
 ================================================================*/

/******************************************************************
 * Port type: sellerPT
 *****************************************************************/

/*
 * Message structure and channel types
 */

struct sellerData {
    int auctionId;
    bool auctionId_initialized;
    object callbackRef;
    bool callbackRef_initialized;
};


/*
 * Per-port definitions
 */

// Channel message types
enum esellerPT {
    sellerData,
};

// Definitions for the port's message struct and channel
struct mtRqstsellerPT {
    esellerPT mtype;
    sellerData _sellerData;
};

chan ctRqstsellerPT mtRqstsellerPT;

/******************************************************************
 * Port type: sellerAnswerPT
 *****************************************************************/

/*
 * Message structure and channel types
 */

struct sellerAnswerData {
    int auctionId;
    bool auctionId_initialized;
};


/*
 * Per-port definitions
 */

// Channel message types
enum esellerAnswerPT {
    sellerAnswerData,
};

// Definitions for the port's message struct and channel
struct mtRqstsellerAnswerPT {
    esellerAnswerPT mtype;
    sellerAnswerData _sellerAnswerData;
};

chan ctRqstsellerAnswerPT mtRqstsellerAnswerPT;

/******************************************************************
 * Port type: buyerPT
 *****************************************************************/

/*
 * Message structure and channel types
 */

struct buyerData {
    int auctionId;
    bool auctionId_initialized;
    object callbackRef;
    bool callbackRef_initialized;
};


/*
 * Per-port definitions
 */

// Channel message types
enum ebuyerPT {
    buyerData,
};

// Definitions for the port's message struct and channel
struct mtRqstbuyerPT {
    ebuyerPT mtype;
    buyerData _buyerData;
};

chan ctRqstbuyerPT mtRqstbuyerPT;

/******************************************************************
 * Port type: buyerAnswerPT
 *****************************************************************/

/*
 * Message structure and channel types
 */

struct buyerAnswerData {
    int auctionId;
    bool auctionId_initialized;
};


/*
 * Per-port definitions
 */

// Channel message types
enum ebuyerAnswerPT {
    buyerAnswerData,
};

// Definitions for the port's message struct and channel
struct mtRqstbuyerAnswerPT {
    ebuyerAnswerPT mtype;
    buyerAnswerData _buyerAnswerData;
};

chan ctRqstbuyerAnswerPT mtRqstbuyerAnswerPT;

/******************************************************************
 * Port type: auctionRegistrationPT
 *****************************************************************/

/*
 * Message structure and channel types
 */

struct auctionDetails {
    int auctionId;
    bool auctionId_initialized;
    object callbackRef;
    bool callbackRef_initialized;
};


/*
 * Per-port definitions
 */

// Channel message types
enum eauctionRegistrationPT {
    auctionDetails,
};

// Definitions for the port's message struct and channel
struct mtRqstauctionRegistrationPT {
    eauctionRegistrationPT mtype;
    auctionDetails _auctionDetails;
};

chan ctRqstauctionRegistrationPT mtRqstauctionRegistrationPT;

/******************************************************************
 * Port type: auctionRegistrationAnswerPT
 *****************************************************************/

/*
 * Message structure and channel types
 */

struct auctionDetailsAnswer {
    int auctionId;
    bool auctionId_initialized;
};


/*
 * Per-port definitions
 */

// Channel message types
enum eauctionRegistrationAnswerPT {
    auctionDetailsAnswer,
};

// Definitions for the port's message struct and channel
struct mtRqstauctionRegistrationAnswerPT {
    eauctionRegistrationAnswerPT mtype;
    auctionDetailsAnswer _auctionDetailsAnswer;
};

chan ctRqstauctionRegistrationAnswerPT mtRqstauctionRegistrationAnswerPT;

// Correlation set type definitions
struct ctauctionService_auctionIdentification {
    bool _initialized;
    int auctionId;
};


class auctionService {
    // track state of dynamically activated process
    static bool active = false;

    /*
     * Container declarations
     */
    static sellerData sellerData;
    static sellerAnswerData sellerAnswerData;
    static buyerData buyerData;
    static buyerAnswerData buyerAnswerData;
    static auctionDetails auctionRegistrationData;
    static auctionDetailsAnswer auctionRegistrationResponse;

    // Correlation set declarations
    static ctauctionService_auctionIdentification auctionIdentification;

    /******************************************************************
     * Incoming channel declaration for:
     * BPEL Process: auctionService
     * Partner: seller
     * Port Type: sellerPT
     *****************************************************************/

    static ctRqstsellerPT impl_seller_sellerPT_rqst =
        new ctRqstsellerPT;

    /******************************************************************
     * Outgoing channel declaration for:
     * Partner: seller
     * Port Type: sellerAnswerPT
     *****************************************************************/

    static ctRqstsellerAnswerPT uses_seller_sellerAnswerPT_rqst;

    /******************************************************************
     * Incoming channel declaration for:
     * BPEL Process: auctionService
     * Partner: buyer
     * Port Type: buyerPT
     *****************************************************************/

    static ctRqstbuyerPT impl_buyer_buyerPT_rqst =
        new ctRqstbuyerPT;

    /******************************************************************
     * Outgoing channel declaration for:
     * Partner: buyer
     * Port Type: buyerAnswerPT
     *****************************************************************/

    static ctRqstbuyerAnswerPT uses_buyer_buyerAnswerPT_rqst;

    /******************************************************************
     * Outgoing channel declaration for:
     * Partner: auctionRegistrationService
     * Port Type: auctionRegistrationPT
     *****************************************************************/

    static ctRqstauctionRegistrationPT uses_auctionRegistrationService_auctionRegistrationPT_rqst;

    /******************************************************************
     * Incoming channel declaration for:
     * BPEL Process: auctionService
     * Partner: auctionRegistrationService
     * Port Type: auctionRegistrationAnswerPT
     *****************************************************************/

    static ctRqstauctionRegistrationAnswerPT impl_auctionRegistrationService_auctionRegistrationAnswerPT_rqst =
        new ctRqstauctionRegistrationAnswerPT;

    // process synchronization variables
    static bool task0_done;
    static bool task1_done;
    static bool task2_done;
    static bool task3_done;

    /*
     * Main mIL process for BPEL process: auctionService
     */
    static void Run()
    {
        // Temporary variables
        mtRqstauctionRegistrationPT rqst0;
        mtRqstauctionRegistrationAnswerPT rqst1;

        /* flow */

        atomic {
            /* Clear the completion flag for each task */
            task0_done = false;
            task1_done = false;
            async task0();
            async task1();
        }

        atomic {
            select { wait(task0_done && task1_done) -> ; }

            /* assign */
            auctionRegistrationData.auctionId_initialized = true;
            auctionRegistrationData.auctionId =
                buyerData.auctionId;
            assert(buyerData.auctionId_initialized, "uninitializedContainer");

            /* assign */
            auctionRegistrationData.callbackRef_initialized = true;
            auctionRegistrationData.callbackRef =
                impl_auctionRegistrationService_auctionRegistrationAnswerPT_rqst;
        }

        /* invoke */
        atomic {
            if (!registrationService.active)
            {
                registrationService.active = true;
                async registrationService.Run();
            }

            assert(uses_auctionRegistrationService_auctionRegistrationPT_rqst != null, "uninitializedPartner");
            assert(
                   auctionRegistrationData.auctionId_initialized == true
                && auctionRegistrationData.callbackRef_initialized == true
            , "unitializedContainer");
            assert(auctionIdentification._initialized, "uninitializedCorrelationSet");
            assert(auctionIdentification.auctionId == auctionRegistrationData.auctionId, "correlationViolation");
            rqst0.mtype = eauctionRegistrationPT.auctionDetails;
            rqst0._auctionDetails = auctionRegistrationData;
            send(uses_auctionRegistrationService_auctionRegistrationPT_rqst, rqst0);
        }

        /* receive */
        atomic {
            select { receive(impl_auctionRegistrationService_auctionRegistrationAnswerPT_rqst,rqst1) -> ; }
            assert(rqst1.mtype == eauctionRegistrationAnswerPT.auctionDetailsAnswer, "unexpected msg type");
            auctionRegistrationResponse = rqst1._auctionDetailsAnswer;

            auctionRegistrationResponse.auctionId_initialized = true;


            /* flow */

            /* Clear the completion flag for each task */
            task2_done = false;
            task3_done = false;
            async task2();
            async task3();
        }

        atomic {
            select { wait(task2_done && task3_done) -> ; }
        }

    }

    static void task0()
    {
        // Temporary variables
        mtRqstsellerPT rqst2;

        /* receive */
        atomic {
            select { receive(impl_seller_sellerPT_rqst,rqst2) -> ; }
            assert(rqst2.mtype == esellerPT.sellerData, "unexpected msg type");
            sellerData = rqst2._sellerData;

            sellerData.auctionId_initialized = true;
            sellerData.callbackRef_initialized = true;

            auctionIdentification.auctionId = sellerData.auctionId;
            auctionIdentification._initialized = true;

            task0_done = true;
        }
    }

    static void task1()
    {
        // Temporary variables
        mtRqstbuyerPT rqst3;

        /* receive */
        atomic {
            select { receive(impl_buyer_buyerPT_rqst,rqst3) -> ; }
            assert(rqst3.mtype == ebuyerPT.buyerData, "unexpected msg type");
            buyerData = rqst3._buyerData;

            buyerData.auctionId_initialized = true;
            buyerData.callbackRef_initialized = true;

            auctionIdentification.auctionId = buyerData.auctionId;
            auctionIdentification._initialized = true;

            task1_done = true;
        }
    }

    static void task2()
    {
        // Temporary variables
        mtRqstsellerAnswerPT rqst4;

        /* assign */
        atomic {
            sellerAnswerData.auctionId_initialized = true;
            sellerAnswerData.auctionId =
                sellerData.auctionId;
            assert(sellerData.auctionId_initialized, "uninitializedContainer");
            uses_seller_sellerAnswerPT_rqst =
                sellerData.callbackRef;
            assert(sellerData.callbackRef_initialized, "uninitializedContainer");
        }

        /* invoke */
        atomic {

            assert(uses_seller_sellerAnswerPT_rqst != null, "uninitializedPartner");
            assert(
                   sellerAnswerData.auctionId_initialized == true
            , "unitializedContainer");
            assert(auctionIdentification._initialized, "uninitializedCorrelationSet");
            assert(auctionIdentification.auctionId == sellerAnswerData.auctionId, "correlationViolation");
            rqst4.mtype = esellerAnswerPT.sellerAnswerData;
            rqst4._sellerAnswerData = sellerAnswerData;
            send(uses_seller_sellerAnswerPT_rqst, rqst4);

            task2_done = true;
        }
    }

    static void task3()
    {
        // Temporary variables
        mtRqstbuyerAnswerPT rqst5;

        /* assign */
        atomic {
            buyerAnswerData.auctionId_initialized = true;
            buyerAnswerData.auctionId =
                buyerData.auctionId;
            assert(buyerData.auctionId_initialized, "uninitializedContainer");
            uses_buyer_buyerAnswerPT_rqst =
                buyerData.callbackRef;
            assert(buyerData.callbackRef_initialized, "uninitializedContainer");
        }

        /* invoke */
        atomic {

            assert(uses_buyer_buyerAnswerPT_rqst != null, "uninitializedPartner");
            assert(
                   buyerAnswerData.auctionId_initialized == true
            , "unitializedContainer");
            assert(auctionIdentification._initialized, "uninitializedCorrelationSet");
            assert(auctionIdentification.auctionId == buyerAnswerData.auctionId, "correlationViolation");
            rqst5.mtype = ebuyerAnswerPT.buyerAnswerData;
            rqst5._buyerAnswerData = buyerAnswerData;
            send(uses_buyer_buyerAnswerPT_rqst, rqst5);

            task3_done = true;
        }
    }

};

/*=================================================================
 = BPEL Process: buyerService
 ================================================================*/

// Correlation set type definitions
struct ctbuyerService_auctionIdentification {
    bool _initialized;
    int auctionId;
};


class buyerService {
    /*
     * Container declarations
     */
    static buyerData buyerData;
    static buyerAnswerData buyerAnswerData;

    // Correlation set declarations
    static ctbuyerService_auctionIdentification auctionIdentification;

    /******************************************************************
     * Outgoing channel declaration for:
     * Partner: auctionHouse
     * Port Type: buyerPT
     *****************************************************************/

    static ctRqstbuyerPT uses_auctionHouse_buyerPT_rqst;

    /******************************************************************
     * Incoming channel declaration for:
     * BPEL Process: buyerService
     * Partner: auctionHouse
     * Port Type: buyerAnswerPT
     *****************************************************************/

    static ctRqstbuyerAnswerPT impl_auctionHouse_buyerAnswerPT_rqst =
        new ctRqstbuyerAnswerPT;

    /*
     * Main mIL process for BPEL process: buyerService
     */
    static void Run()
    {
        // Temporary variables
        mtRqstbuyerPT rqst6;
        mtRqstbuyerAnswerPT rqst7;

        /* assign */
        atomic {
            buyerData.callbackRef_initialized = true;
            buyerData.callbackRef =
                impl_auctionHouse_buyerAnswerPT_rqst;
            buyerData.auctionId_initialized = true;
            buyerData.auctionId =
                1;
        }

        /* invoke */
        atomic {
            if (!auctionService.active)
            {
                auctionService.active = true;
                async auctionService.Run();
            }

            assert(uses_auctionHouse_buyerPT_rqst != null, "uninitializedPartner");
            assert(
                   buyerData.auctionId_initialized == true
                && buyerData.callbackRef_initialized == true
            , "unitializedContainer");
            auctionIdentification.auctionId = buyerData.auctionId;
            auctionIdentification._initialized = true;
            rqst6.mtype = ebuyerPT.buyerData;
            rqst6._buyerData = buyerData;
            send(uses_auctionHouse_buyerPT_rqst, rqst6);
        }

        /* receive */
        atomic {
            select { receive(impl_auctionHouse_buyerAnswerPT_rqst,rqst7) -> ; }
            assert(rqst7.mtype == ebuyerAnswerPT.buyerAnswerData, "unexpected msg type");
            buyerAnswerData = rqst7._buyerAnswerData;

            buyerAnswerData.auctionId_initialized = true;

        }

    }

};

/*=================================================================
 = BPEL Process: sellerService
 ================================================================*/

// Correlation set type definitions
struct ctsellerService_auctionIdentification {
    bool _initialized;
    int auctionId;
};


class sellerService {
    /*
     * Container declarations
     */
    static sellerData sellerData;
    static sellerAnswerData sellerAnswerData;

    // Correlation set declarations
    static ctsellerService_auctionIdentification auctionIdentification;

    /******************************************************************
     * Outgoing channel declaration for:
     * Partner: auctionHouse
     * Port Type: sellerPT
     *****************************************************************/

    static ctRqstsellerPT uses_auctionHouse_sellerPT_rqst;

    /******************************************************************
     * Incoming channel declaration for:
     * BPEL Process: sellerService
     * Partner: auctionHouse
     * Port Type: sellerAnswerPT
     *****************************************************************/

    static ctRqstsellerAnswerPT impl_auctionHouse_sellerAnswerPT_rqst =
        new ctRqstsellerAnswerPT;

    /*
     * Main mIL process for BPEL process: sellerService
     */
    static void Run()
    {
        // Temporary variables
        mtRqstsellerPT rqst8;
        mtRqstsellerAnswerPT rqst9;

        /* assign */
        atomic {
            sellerData.callbackRef_initialized = true;
            sellerData.callbackRef =
                impl_auctionHouse_sellerAnswerPT_rqst;
            sellerData.auctionId_initialized = true;
            sellerData.auctionId =
                1;
        }

        /* invoke */
        atomic {
            if (!auctionService.active)
            {
                auctionService.active = true;
                async auctionService.Run();
            }

            assert(uses_auctionHouse_sellerPT_rqst != null, "uninitializedPartner");
            assert(
                   sellerData.auctionId_initialized == true
                && sellerData.callbackRef_initialized == true
            , "unitializedContainer");
            auctionIdentification.auctionId = sellerData.auctionId;
            auctionIdentification._initialized = true;
            rqst8.mtype = esellerPT.sellerData;
            rqst8._sellerData = sellerData;
            send(uses_auctionHouse_sellerPT_rqst, rqst8);
        }

        /* receive */
        atomic {
            select { receive(impl_auctionHouse_sellerAnswerPT_rqst,rqst9) -> ; }
            assert(rqst9.mtype == esellerAnswerPT.sellerAnswerData, "unexpected msg type");
            sellerAnswerData = rqst9._sellerAnswerData;

            sellerAnswerData.auctionId_initialized = true;

        }

    }

};

/*=================================================================
 = BPEL Process: registrationService
 ================================================================*/

// Correlation set type definitions
struct ctregistrationService_auctionIdentification {
    bool _initialized;
    int auctionId;
};


class registrationService {
    // track state of dynamically activated process
    static bool active = false;

    /*
     * Container declarations
     */
    static auctionDetails auctionRegistrationData;
    static auctionDetailsAnswer auctionRegistrationResponse;

    // Correlation set declarations
    static ctregistrationService_auctionIdentification auctionIdentification;

    /******************************************************************
     * Incoming channel declaration for:
     * BPEL Process: registrationService
     * Partner: auctionHouse
     * Port Type: auctionRegistrationPT
     *****************************************************************/

    static ctRqstauctionRegistrationPT impl_auctionHouse_auctionRegistrationPT_rqst =
        new ctRqstauctionRegistrationPT;

    /******************************************************************
     * Outgoing channel declaration for:
     * Partner: auctionHouse
     * Port Type: auctionRegistrationAnswerPT
     *****************************************************************/

    static ctRqstauctionRegistrationAnswerPT uses_auctionHouse_auctionRegistrationAnswerPT_rqst;

    /*
     * Main mIL process for BPEL process: registrationService
     */
    static void Run()
    {
        // Temporary variables
        mtRqstauctionRegistrationPT rqst10;
        mtRqstauctionRegistrationAnswerPT rqst11;

        /* receive */
        atomic {
            select { receive(impl_auctionHouse_auctionRegistrationPT_rqst,rqst10) -> ; }
            assert(rqst10.mtype == eauctionRegistrationPT.auctionDetails, "unexpected msg type");
            auctionRegistrationData = rqst10._auctionDetails;

            auctionRegistrationData.auctionId_initialized = true;
            auctionRegistrationData.callbackRef_initialized = true;

            auctionIdentification.auctionId = auctionRegistrationData.auctionId;
            auctionIdentification._initialized = true;

            /* assign */
            auctionRegistrationResponse.auctionId_initialized = true;
            auctionRegistrationResponse.auctionId =
                auctionRegistrationData.auctionId;
            assert(auctionRegistrationData.auctionId_initialized, "uninitializedContainer");
            uses_auctionHouse_auctionRegistrationAnswerPT_rqst =
                auctionRegistrationData.callbackRef;
            assert(auctionRegistrationData.callbackRef_initialized, "uninitializedContainer");
        }

        /* invoke */
        atomic {

            assert(uses_auctionHouse_auctionRegistrationAnswerPT_rqst != null, "uninitializedPartner");
            assert(
                   auctionRegistrationResponse.auctionId_initialized == true
            , "unitializedContainer");
            assert(auctionIdentification._initialized, "uninitializedCorrelationSet");
            assert(auctionIdentification.auctionId == auctionRegistrationResponse.auctionId, "correlationViolation");
            rqst11.mtype = eauctionRegistrationAnswerPT.auctionDetailsAnswer;
            rqst11._auctionDetailsAnswer = auctionRegistrationResponse;
            send(uses_auctionHouse_auctionRegistrationAnswerPT_rqst, rqst11);
        }

    }

};

class Init
{
    /*
     * Global initialization process
     */
    activate static void init()
    {
        atomic {
            /*
             * Bind individual ports together
             */

            /* Bind auctionService/seller to sellerService/auctionHouse */
            sellerService.uses_auctionHouse_sellerPT_rqst =
                auctionService.impl_seller_sellerPT_rqst;

            /* Bind auctionService/buyer to buyerService/auctionHouse */
            buyerService.uses_auctionHouse_buyerPT_rqst =
                auctionService.impl_buyer_buyerPT_rqst;

            /* Bind auctionService/auctionRegistrationService to registrationService/auctionHouse */
            auctionService.uses_auctionRegistrationService_auctionRegistrationPT_rqst =
                registrationService.impl_auctionHouse_auctionRegistrationPT_rqst;


            /*
             * Initialize startup processes as specified by the modeling annotations
             */
            buyerService.buyerData.auctionId_initialized = false;
            buyerService.buyerData.callbackRef_initialized = false;
            buyerService.buyerAnswerData.auctionId_initialized = false;
            buyerService.auctionIdentification._initialized = false;
            sellerService.sellerData.auctionId_initialized = false;
            sellerService.sellerData.callbackRef_initialized = false;
            sellerService.sellerAnswerData.auctionId_initialized = false;
            sellerService.auctionIdentification._initialized = false;

            async buyerService.Run();
            async sellerService.Run();
        }
    }
};
