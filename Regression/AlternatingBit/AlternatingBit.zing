class Msg {
    bool body;
    bool bit;
};

class Ack {
    bool bit;
};

chan MsgChan Msg;
chan AckChan Ack;

chan BoolChan bool;

class Sender {
    static MsgChan xmit;
    static AckChan recv;
    
    static void TransmitMsg(bool body, bool bit)
    {
        Msg m;
        
        select {
            wait(true) -> {
                assume(sizeof(xmit) < Main.QueueSize);
                m = new Msg;
                m.body = body;
                m.bit = bit;
                send(xmit, m);
            }
            wait(true) -> /* lost message */ ;
        }
    }
    
    static void Run()
    {
        bool currentBit = false;
        Ack a;
        bool body;
        bool gotAck;
        
        while (true) {
            atomic {
                body = choose(bool);
                send(Main.reliableChan, body);
                
                TransmitMsg(body, currentBit);
                
                gotAck = false;
            }
            
            while (!gotAck) {
                atomic {
                    select first {
                        receive(recv, a) -> gotAck = (a.bit == currentBit);
                        timeout -> TransmitMsg(body, currentBit);
                    }
                }
            }
            
            currentBit = !currentBit;
        }
    }
};

class Receiver {
    static MsgChan recv;
    static AckChan xmit;
    
    static void TransmitAck(bool bit)
    {
        Ack a;
        
        select {
            wait(true) -> {
                a = new Ack;
                a.bit = bit;
                send(xmit, a);
            }
            wait(true) -> /* lost ack */ ;
        }
    }
    
    static void Run()
    {
        bool expectedBit = false;
        bool trueBody;
        Msg m;
        
        // Loop forever consuming messages
        while (true) {
            select { receive(recv, m) -> ; }
                
            atomic {
                // Always send an ack with the same bit
                TransmitAck(m.bit);
                
                if (expectedBit == m.bit) {
                    // Consume the message here and verify it's body matches
                    // what we received through the reliable channel
                    select { receive(Main.reliableChan, trueBody) -> ; }
                    assert(trueBody == m.body);
                    
                    expectedBit = !expectedBit;
                }
            }
        }
    }
};


class Main {

    static int QueueSize = 2;
    
    static BoolChan reliableChan;
    
    activate static void Run()
    {
        atomic {
            reliableChan = new BoolChan;
            
            Sender.xmit = Receiver.recv = new MsgChan;
            Sender.recv = Receiver.xmit = new AckChan;
            
            async Sender.Run();
            async Receiver.Run();
        }
    }
};
