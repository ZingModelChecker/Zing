class Fork {
	Philosopher holder;
	
	void PickUp(Philosopher eater)
	{
		atomic {
			select { wait(holder == null) -> holder = eater; }
		}
	}
	
	void PutDown()
	{
		holder = null;
	}
	
	bool InUse()
	{
		return holder != null;
	}
};

class Philosopher {
	Fork leftFork;
	Fork rightFork;
	
	void Run()
	{
		while (true)
		{
			// pick up forks
			leftFork.PickUp(this);
			rightFork.PickUp(this);
			// eat for a while
			leftFork.PutDown();
			rightFork.PutDown();
			// think for a while
		}	
	}
};

class Init {
	activate static void Run()
	{
		Philosopher p;
		Fork f;
		
		atomic {
			p = new Philosopher;
			f = new Fork;
			
			p.leftFork = f;
			p.rightFork = f;
			
			async p.Run();
		}
	}
};