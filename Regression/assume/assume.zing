//
// assume.zing - the "assume" statement
//

//
// In Zing, the "assume" statement is used to identify states that
// are not interesting to consider. One simple example of this, in
// which we wish to apply a constraint to a set of non-deterministic
// choices, is demonstrated here. We perform two "choose" operations
// on the enumeration E, which has 3 elements. Following the second
// "choose", there are 9 alternatives available for consideration by
// the state explorer. A "choose" statement allows us to effectively
// prune those combinations where some predicate is satisfied. In this
// case, our predicate eliminates those states in which the same choice
// was made by each "choose", which reduces the number of states to
// consider from 9 to 6.
//
// In concurrent systems, the assume statement can also be helpful. To
// ensure that a Zing channel never contains more than one element, we
// can require message senders to block until the channel is empty and
// then (atomically) send their message. Alternatively, we can simply
// "assume" the emptiness of the channel before sending (atomically,
// again). The advantage here is that instead of reaching an undesirable
// state and then waiting for the desired predicate to become true, we
// simply remove from consideration those interleavings for which the
// predicate was allowed to become false. For this scenario, we wind up
// only considering "fair" interleavings between producers and consumers.
//

enum E { element1, element2, element3 };

class Test {
    activate static void main() {
        E e1;
        E e2;
        
        e1 = choose(E);
        e2 = choose(E);
        
        assume(e1 != e2);
        
        trace("e1={0}, e2={1}", e1, e2);
    }
};
