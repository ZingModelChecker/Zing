class SingletonLock {
	static bool locked;

	atomic static void acquire () {
		select { wait (!locked) -> locked = true; }
	}

	atomic static void release () {
		locked = false;
	}
};


class BoolProg {
	static bool g0;
	activate static void main() {

		async foo_1();
		async bar_1();
	}


	static void bar_1() {
		g0=false;
		return;
	}

	static void foo_1() {
		g0=true;
		assume (!(g0));
		assert (false);
       }


};
