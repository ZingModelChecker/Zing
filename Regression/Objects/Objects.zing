//
// select.zing - blocking in Zing
//

//
// In Zing, objects are very simple. There is no inheritance, no overloading
// of operators or methods, no access qualifiers, and no constructors.
// Object members may be marked as "static" with essentially the same meaning
// as in C#. A static field is effectively a global variable.
//
// A static method serves much the same purpose as in C#. A static method which
// returns void and has no parameters may also be qualified with the "activate"
// keyword which causes a process executing the method to be created in the
// initial state of the model.
//
// Objects (and other complex types like sets and arrays) are created through
// the "new" operator.
//

class Main {
    //
    // Every Zing model must include at least one "activate static" method to
    // cause an executable process to be created. If multiple processes are
    // required, each executing the same method, a separate process would be
    // needed to activate them using async method calls, as in:
    //
    // activate static void RunSeveral()
    // {
    //     atomic {
    //         async Run();
    //         async Run();
    //         async Run();
    //     }
    // }
    //
    // Another advantage of asynchronous calls over the "activate" keyword is
    // that async calls may have input parameters. The "atomic" block is used
    // to reduce the size of a model's state-space by preventing the
    // consideration of process interleavings that are uninteresting. In this
    // case, all three instances of Run() will become activated and runnable
    // at precisely the same instant.
    //

    activate static void Run()
    {
        int i;
        Simple s = new Simple;
        s.val = 5;
        i = s.foo();
        i = s.bar(2);
    }
};

//
// Note that we also could have included Run() as a static member of the
// "Simple" class. Static and non-static members may be mixed freely.
//
class Simple {
    int val;

    int foo()
    {
        return val+1;
    }
    
    int bar(int x)
    {
        int a;
        
        //
        // Make a nested call using an implicit "this". Note that we can't
        // simply say "return baz(x);" because method calls are only
        // permitted in simple assignment statements or expression statements.
        //
        a = baz(x);
        
        return a;
    }

    int baz(int y)
    {
        return this.val + y;
    }
};
