//
// chan1.zing - basic channel sample
//

//
// Channels are message queues of unbounded size. A channel declaration
// provides the type of message carried by the channel. Messages may be
// of simple or complex types. Simple types are passed by value, complex
// types by reference.
//
// Messages are placed in a channel using a "send" statement, which is
// always a non-blocking operation. Messages are received using a "select"
// statement with a "receive" join condition, which will block if the
// channel is empty. Currently, one may only read the next available
// message. A language facility for receiving messages in a more
// discriminating way may be provided in the future.
//
// The number of messages currently in a channel can be obtained by use of
// the "sizeof" operator on a queue variable.
//
// A channel is itself a complex type and must be allocated via "new"
// prior to use.


// Declare a channel named "IntChan" which carries messages of type "int".
chan IntChan int;

class ChanTest
{
    // Declare an instance of IntChan and initialize it.
    static IntChan sendInts = new IntChan;

    // Activate an instance of Sender() in the model's initial state.
    activate static void Sender()
    {
        send(sendInts, 42);
    }

    // Activate a process to receive from the channel
    activate static void Receiver()
    {
        int n;

        // Wait for a message to arrive, receive it in variable 'n', then
        // do nothing.

        select { receive(sendInts, n) -> ; }
    }
};
