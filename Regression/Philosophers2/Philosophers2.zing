class Fork {
	Philosopher holder;
	
	void PickUp(Philosopher eater)
	{
		atomic {
			select { wait(Free()) -> holder = eater; }
		}
	}

	void Grab(Philosopher eater)
	{
		assert(holder == null);
		holder = eater;
	}
	
	void PutDown()
	{
		holder = null;
	}
	
	bool InUse()
	{
		return holder != null;
	}

	bool Free()
	{
		return holder == null;
	}
};

class Philosopher {
	Fork leftFork;
	Fork rightFork;
	
	void Run()
	{
		while (true)
		{
			// pick up forks
			atomic {
				select {
					wait(leftFork.Free() && rightFork.Free()) ->
						{ leftFork.Grab(this); rightFork.Grab(this); }
				}
			}
			// eat for a while
			leftFork.PutDown();
			rightFork.PutDown();
			// think for a while
		}	
	}
};

array Philosophers[4] Philosopher;
array Forks[4] Fork;

class Init {
	activate static void Run()
	{
		Philosophers p;
		Forks f;
		int i;
		
		atomic {
			// Allocate the arrays of forks and philosophers
			p = new Philosophers;
			f = new Forks;
			
			// Allocate the individual fork and philosopher objects
			i = 0;
			while (i < sizeof(Philosophers))
			{
				p[i] = new Philosopher;
				f[i] = new Fork;
				i = i + 1;
			}
			
			// Associate the philosophers with their forks and let them begin
			i = 0;
			while (i < sizeof(Philosophers))
			{
				p[i].leftFork = f[i];
				p[i].rightFork = f[(i+1) % sizeof(Philosophers)];
				
				async p[i].Run();
				i = i + 1;
			}
		}
	}
};
