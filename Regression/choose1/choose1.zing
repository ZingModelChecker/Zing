//
// choose1.zing - non-deterministic choice
//

//
// Zing accommodates non-determinism through the "choose" operator. This is
// an effective tool for coping with those parts of a system that, while outside
// the scope of the Zing model, do contribute to its behavior. Think of "choose"
// as a roll of an n-sided die. The Zing state explorer will consider all of the
// possible outcomes and their affect on the subsequent behavior of the model.
//
// Choose may be used in two distinct ways. One may choose from a number of
// alternatives known statically by appying choose to an enumeration, a range
// type, or the "bool" type. The result of the "choose" operator is a value of
// the appropriate type (the enum type, an integer, or a boolean, respectively).
//
// The second, dynamic, form of choice occurs when it is applied to variables of
// set or array types. In this case, the argument to "choose" is a variable
// rather than a type, and the choice is made dynamically among the members of
// the set or array. (NOTE: this form is not yet implemented).
//
// The Zing compiler & runtime will place arbitrary limits on the number of
// choice alternatives to reduce the potential for state-space explosion.
//
// In the state explorer, states resulting from different "choose" selections
// are named "cN", where "N" is the number of the choice selected.
//
// NOTE: The choose operator may only be used in simple assignment statements
// currently. The compiler will report a syntax error if choose is embedded
// within a more complex expression or within the conditional expression for
// a "while" or "if" statement.
//

enum myEnum { a, b, c, d };

range smallInts 1 .. 5;

class SimpleTest
{
    activate static void Main()
    {
        myEnum e;
        int n;
        bool f;

        e = choose(myEnum);
            
        n = choose(smallInts);
        
        f = choose(bool);
    }
};