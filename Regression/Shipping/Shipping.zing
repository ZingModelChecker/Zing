/*
 * mIL model for BPEL abstract processes
 *
 * Compiled on: 3/26/2003 4:57:04 PM
 * 
 * Source BPEL processes:
 *    shippingServiceCustomer
 *    shippingService
 */

// mIL type definition for XSD type: http://ship.org/wsdl/shipping:itemCountType
range itemCountType 1 .. 3;

/*=================================================================
 = BPEL Process: shippingServiceCustomer
 ================================================================*/

/******************************************************************
 * Port type: shippingServicePT
 *****************************************************************/

/*
 * Message structure and channel types
 */

struct shippingRequestMsg {
    int shipOrderID;
    bool shipOrderID_initialized;
    bool shipComplete;
    bool shipComplete_initialized;
    int itemsTotal;
    bool itemsTotal_initialized;
};


/*
 * Per-port definitions
 */

// Channel message types
enum eshippingServicePT {
    shippingRequestMsg,
};

// Definitions for the port's message struct and channel
struct mtRqstshippingServicePT {
    eshippingServicePT mtype;
    shippingRequestMsg _shippingRequestMsg;
};

chan ctRqstshippingServicePT mtRqstshippingServicePT;

/******************************************************************
 * Port type: shippingServiceCustomerPT
 *****************************************************************/

/*
 * Message structure and channel types
 */

struct shippingNoticeMsg {
    int shipOrderID;
    bool shipOrderID_initialized;
    int itemsCount;
    bool itemsCount_initialized;
};


/*
 * Per-port definitions
 */

// Channel message types
enum eshippingServiceCustomerPT {
    shippingNoticeMsg,
};

// Definitions for the port's message struct and channel
struct mtRqstshippingServiceCustomerPT {
    eshippingServiceCustomerPT mtype;
    shippingNoticeMsg _shippingNoticeMsg;
};

chan ctRqstshippingServiceCustomerPT mtRqstshippingServiceCustomerPT;

// Correlation set type definitions
struct ctshippingServiceCustomer_shipOrder {
    bool _initialized;
    int shipOrderID;
};

struct itemsShipped {
    int numItemsShipped;
    bool numItemsShipped_initialized;
};

class shippingServiceCustomer {
    /*
     * Container declarations
     */
    static shippingRequestMsg shipRequest;
    static shippingNoticeMsg shipNotice;
    static itemsShipped itemsShipped;

    // Correlation set declarations
    static ctshippingServiceCustomer_shipOrder shipOrder;

    /******************************************************************
     * Outgoing channel declaration for:
     * Partner: shipper
     * Port Type: shippingServicePT
     *****************************************************************/

    static ctRqstshippingServicePT uses_shipper_shippingServicePT_rqst;

    /******************************************************************
     * Incoming channel declaration for:
     * BPEL Process: shippingServiceCustomer
     * Partner: shipper
     * Port Type: shippingServiceCustomerPT
     *****************************************************************/

    static ctRqstshippingServiceCustomerPT impl_shipper_shippingServiceCustomerPT_rqst =
        new ctRqstshippingServiceCustomerPT;

    /*
     * Main mIL process for BPEL process: shippingServiceCustomer
     */
    static void Run()
    {
        // Temporary variables
        mtRqstshippingServicePT rqst0;
        mtRqstshippingServiceCustomerPT rqst1;
        mtRqstshippingServiceCustomerPT rqst2;

        /* assign */
        atomic {
            shipRequest.shipComplete = choose(bool);
            shipRequest.shipComplete_initialized = true;
            shipRequest.itemsTotal = choose(itemCountType);
            shipRequest.itemsTotal_initialized = true;
            shipRequest.shipOrderID = Init.guid;
            Init.guid = Init.guid + 1;
            shipRequest.shipOrderID_initialized = true;
        }
        /* invoke */
        atomic {
            if (!shippingService.active)
            {
                shippingService.active = true;
                async shippingService.Run();
            }

            assert(uses_shipper_shippingServicePT_rqst != null, "uninitializedPartner");
            assert(
                   shipRequest.shipOrderID_initialized == true
                && shipRequest.shipComplete_initialized == true
                && shipRequest.itemsTotal_initialized == true
            , "unitializedContainer");
            shipOrder.shipOrderID = shipRequest.shipOrderID;
            shipOrder._initialized = true;
            rqst0.mtype = eshippingServicePT.shippingRequestMsg;
            rqst0._shippingRequestMsg = shipRequest;
            send(uses_shipper_shippingServicePT_rqst, rqst0);
        }

        /* switch */
        if (shipRequest.shipComplete)
        {
            /* receive */
            atomic {
                select { receive(impl_shipper_shippingServiceCustomerPT_rqst,rqst1) -> ; }
                assert(rqst1.mtype == eshippingServiceCustomerPT.shippingNoticeMsg, "unexpected msg type");
                shipNotice = rqst1._shippingNoticeMsg;

                shipNotice.shipOrderID_initialized = true;
                shipNotice.itemsCount_initialized = true;

            }

        }
        else
        {
            /* assign */
            atomic {
                itemsShipped.numItemsShipped_initialized = true;
                itemsShipped.numItemsShipped =
                    0;
            }

            /* while */
            while (itemsShipped.numItemsShipped<
shipRequest.itemsTotal)
            {
                /* receive */
                atomic {
                    select { receive(impl_shipper_shippingServiceCustomerPT_rqst,rqst2) -> ; }
                    assert(rqst2.mtype == eshippingServiceCustomerPT.shippingNoticeMsg, "unexpected msg type");
                    shipNotice = rqst2._shippingNoticeMsg;

                    shipNotice.shipOrderID_initialized = true;
                    shipNotice.itemsCount_initialized = true;


                    /* assign */
                    itemsShipped.numItemsShipped_initialized = true;
                    itemsShipped.numItemsShipped =
                        itemsShipped.numItemsShipped+
shipNotice.itemsCount;
                }

            }
        }
    }

};

/*=================================================================
 = BPEL Process: shippingService
 ================================================================*/

// Correlation set type definitions
struct ctshippingService_shipOrder {
    bool _initialized;
    int shipOrderID;
};


class shippingService {
    // track state of dynamically activated process
    static bool active = false;

    /*
     * Container declarations
     */
    static shippingRequestMsg shipRequest;
    static shippingNoticeMsg shipNotice;
    static itemsShipped itemsShipped;

    // Correlation set declarations
    static ctshippingService_shipOrder shipOrder;

    /******************************************************************
     * Incoming channel declaration for:
     * BPEL Process: shippingService
     * Partner: customer
     * Port Type: shippingServicePT
     *****************************************************************/

    static ctRqstshippingServicePT impl_customer_shippingServicePT_rqst =
        new ctRqstshippingServicePT;

    /******************************************************************
     * Outgoing channel declaration for:
     * Partner: customer
     * Port Type: shippingServiceCustomerPT
     *****************************************************************/

    static ctRqstshippingServiceCustomerPT uses_customer_shippingServiceCustomerPT_rqst;

    /*
     * Main mIL process for BPEL process: shippingService
     */
    static void Run()
    {
        // Temporary variables
        mtRqstshippingServicePT rqst3;
        mtRqstshippingServiceCustomerPT rqst4;
        mtRqstshippingServiceCustomerPT rqst5;

        /* receive */
        atomic {
            select { receive(impl_customer_shippingServicePT_rqst,rqst3) -> ; }
            assert(rqst3.mtype == eshippingServicePT.shippingRequestMsg, "unexpected msg type");
            shipRequest = rqst3._shippingRequestMsg;

            shipRequest.shipOrderID_initialized = true;
            shipRequest.shipComplete_initialized = true;
            shipRequest.itemsTotal_initialized = true;

            shipOrder.shipOrderID = shipRequest.shipOrderID;
            shipOrder._initialized = true;
        }

        /* switch */
        if (shipRequest.shipComplete)
        {
            /* assign */
            atomic {
                shipNotice.itemsCount_initialized = true;
                shipNotice.itemsCount =
                    shipRequest.itemsTotal;
                assert(shipRequest.itemsTotal_initialized, "uninitializedContainer");
                shipNotice.shipOrderID_initialized = true;
                shipNotice.shipOrderID =
                    shipRequest.shipOrderID;
                assert(shipRequest.shipOrderID_initialized, "uninitializedContainer");
            }

            /* invoke */
            atomic {

                assert(uses_customer_shippingServiceCustomerPT_rqst != null, "uninitializedPartner");
                assert(
                       shipNotice.shipOrderID_initialized == true
                    && shipNotice.itemsCount_initialized == true
                , "unitializedContainer");
                rqst4.mtype = eshippingServiceCustomerPT.shippingNoticeMsg;
                rqst4._shippingNoticeMsg = shipNotice;
                send(uses_customer_shippingServiceCustomerPT_rqst, rqst4);
            }

        }
        else
        {
            /* assign */
            atomic {
                itemsShipped.numItemsShipped_initialized = true;
                itemsShipped.numItemsShipped =
                    0;
            }

            /* while */
            while (itemsShipped.numItemsShipped<
shipRequest.itemsTotal)
            {
                /* assign */
                atomic {
                    shipNotice.itemsCount = choose(itemCountType);
                    shipNotice.itemsCount_initialized = true;
                    shipNotice.shipOrderID_initialized = true;
                    shipNotice.shipOrderID =
                        shipRequest.shipOrderID;
                    assert(shipRequest.shipOrderID_initialized, "uninitializedContainer");
                }

                /* switch */
                if (shipNotice.itemsCount+
	itemsShipped.numItemsShipped>
	shipRequest.itemsTotal)
                {
                    /* assign */
                    atomic {
                        shipNotice.itemsCount_initialized = true;
                        shipNotice.itemsCount =
                            shipRequest.itemsTotal-
	itemsShipped.numItemsShipped;
                    }

                }
                else
                {
                    ;
                }
                /* invoke */
                atomic {

                    assert(uses_customer_shippingServiceCustomerPT_rqst != null, "uninitializedPartner");
                    assert(
                           shipNotice.shipOrderID_initialized == true
                        && shipNotice.itemsCount_initialized == true
                    , "unitializedContainer");
                    rqst5.mtype = eshippingServiceCustomerPT.shippingNoticeMsg;
                    rqst5._shippingNoticeMsg = shipNotice;
                    send(uses_customer_shippingServiceCustomerPT_rqst, rqst5);

                    /* assign */
                    itemsShipped.numItemsShipped_initialized = true;
                    itemsShipped.numItemsShipped =
                        itemsShipped.numItemsShipped+
shipNotice.itemsCount;
                }

            }
        }
    }

};

class Init
{
    static int guid;

    /*
     * Global initialization process
     */
    activate static void init()
    {
        atomic {
            /*
             * Bind individual ports together
             */

            /* Bind shippingServiceCustomer/shipper to shippingService/customer */
            shippingServiceCustomer.uses_shipper_shippingServicePT_rqst =
                shippingService.impl_customer_shippingServicePT_rqst;
            shippingService.uses_customer_shippingServiceCustomerPT_rqst =
                shippingServiceCustomer.impl_shipper_shippingServiceCustomerPT_rqst;


            /*
             * Initialize startup processes as specified by the modeling annotations
             */
            shippingServiceCustomer.shipRequest.shipOrderID_initialized = false;
            shippingServiceCustomer.shipRequest.shipComplete_initialized = false;
            shippingServiceCustomer.shipRequest.itemsTotal_initialized = false;
            shippingServiceCustomer.shipNotice.shipOrderID_initialized = false;
            shippingServiceCustomer.shipNotice.itemsCount_initialized = false;
            shippingServiceCustomer.itemsShipped.numItemsShipped_initialized = false;
            shippingServiceCustomer.shipOrder._initialized = false;

            async shippingServiceCustomer.Run();
        }
    }
};
